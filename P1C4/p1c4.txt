Using try-catch Blocks

    Used to establish exception handlers for a block of code.

    Within the try block:
        Place code that might throw an exception.

    Within the catch block:
        Specify a handler for each exception type you can handle.

        Example: throw_exception.cpp


INHERITANCE

    Understanding that sub-classes can inherit the functionality of their super-classes, is essential before learning about the stdlib exceptions.

EXAMPLE:

    ```
    struct Superclass {
        int x;
    };

    struct Subclass : Superclass {
        // Inherits members from Superclass that are not marked private!
        int y;
        int foo() {
            return x + y; // Subclass inherits int x from Superclass!
        }
    };

    ```

    Handlers will catch a given type and any of its childrens' types.


stdlib Exception Classes

    Inheritance has crucial impact on how code handles exceptions.

    stdlib contais useful exception types readily available to be used.


Standard Exception Classes

    <stdexcept> header

    std::exception is the superclass for all the sandard exception classes.

    Three main groups of subclasses in std::exception:

        1. logic errors     <- Will encounter!
        2. runtime errors   <- Will encounter!
        3. language support errors (not that relevant)

---------------------------- 
exception:
    runtime_error:
        system-error,
        underflow_error,
        overflow_error,
        ...
    logic_error:
        domain_error,
        invalid-argument,
        length_error,
        out_of_range,
        ...
bad_cast,
bad_alloc,
...
---------------------------- 

Logic errors

    Derive from the logic_error class.
    Can be avoided through careful programming.

    Subclasses to be aware of:

        domain_error
        Errors related to valid input range.

        invalid_argument
        Unexpected arguments.

        length_error
        Some action violates the maximum size constraint.

        out_of_range
        Some value is not within expected range.


Runtime Errors

    Derive from the runtime_error class.
    Help to report error conditions outside the program's scope.

    Subclasses to be aware of:

        system_error
        Operating system has encountered some error.

        over_flow and under_flow
        Arithmetic overflow and underflow.


Other Errors

    Inherit directly from exception.

        bad_alloc
        Keyword new failed to allocate required memory for dynamic storage.


Language Support Errors

    Indicate that some core language feature failed at runtime.
    Programmers do not use these errors directly.


Handling exceptions

    Rules for handling exceptioons are based on class inheritance.
    A catch block can handle a thrown exception if the type matches the handler's exception type, or if the thrown type *inherits* from the handler's type.

    EXAMPLE:
    Handling different types of exceptions originating from the same try block:

    ```
    try {
        // Code that might throw an exception.
    } catch (const std::logic_error& ex) {
        // Log exception and terminate the program: Programming error.
    } catch (const std::runtime_error& ex) {
        // Try to recover.
    } catch (const std::exception& ex) {
        // Handle any exception deriving from std:exception that is not a logic_error or runtime_error.
    } catch(...) {
        // Unforseen exception type has been thrown.
    }

    ```


RETHROWING AN Exception

    Within a catch block the throw keyword can be used: This is called rethrowing an exception.

    ```
    try {
            // Code that might throw a system_error.

    } catch(const std::system_error& ex) {
        if (ex.code()! = std::errc::permission_denied) {
            // Not a permission denied error!
            throw;  // Rethrow if not an EACCES error.
        }
        // Recover from permission denied.
    }

    ```

    There are performance penalties to using this convoluted code!
    
    Define a new exception type and create a separate catch handler for the EACCES error:

    ```
    try {
            // Throw a PermissionDenied instead
    } catch(const PermissionDenied& ex) {
        // Recover from an EACCES error (Permission Denied) ...
    }

    ```


User-Defined Exceptions

    Your own exceptions can be defined.
    They will usually inherit from std::exception.
    All the classes from stdlib use exceptions that derive from std::exception.


The noexcept Keyword

    Any function that cannot possibly throw an exception can and should be marked as noexcept.

    ```
    bool is_odd(int x) noexcept {
        return 1 == (x % 2);
    }

    ```

    What happens when an exception is thrown within a block marked 'noexcept':
    Program will crash if your code throws an exception inside a function marked noexcept!

    Functions marked noexcept will enable some code optimizations. The compiler can use move semantics.


Call Stacks and Exceptions

    The 'call stack' is a runtime structure that stores information about active functions.
    Allows programs to have many function calls nested within each other.

Stacks

    A stack is a flexible data container that can hold a dynamic number of elements.

    Two essential operations that stacks support:

        1. pushing elements onto the top of the stack
        2. popping elements off the top of the stack

    Stacks are a last-in, first-out data structure.


Call Stacks and Exception Handling

    Runtime seeks the closest exception handler to the thrown exception.
    
    If no matching handler exists in the current stack frame, the runtime will unwind the call stack until a suitable handler is found.
    
    Objects whose lifetimes are ended get destroyed in the usual way.


Throwing in Destructors

    Not the wisest of ideas.

    Exceptions thrown in a destructor MUST be caught within the destructor.

<stdexcept>
source: https://en.cppreference.com/w/cpp/header/stdexcept

    This header is part of the error handling library.

source: https://cplusplus.com/reference/stdexcept/

    This header defines a set of standard exceptions that both the library and programs can use to report common errors.

    They are divided in two sets:

        Classes
        1. Logic Errors
            logic_error, Logic error exception.
            domain_error, Domain error exception.
            invalid_argument, Invalid argument exception.
            length_error, Length error exception.
            out_of_range, Out of range error exception.

        2. Runtime Errors
            runtime_error, Runtime error exception.
            range_error, Range error exception.
            overflow_error, Overflow error exception.
            underflow_error, Underflow error exception.

SimpleString Class

    Description:
    ------------

    The example shows how constructors, destructors, members, exceptions work together.

    simplestring.cpp adds C-style strings together and then print the result.

    A class enclosing a SimpleString as a member must have the string fully constructed and class invariants established before it can complete. Destructors work the opposite way.


    Constructor of SimpleString.cpp:
    --------------------------------

    1.  The construction takes a single max_size argument.
        This is the maximum ength of the string, including a null terminator.
    2.  The member initializer saves this length into the max_size member variable.
        The same value is used in the new array expression when a buffer is allocated to store the string.
    3.  A pointer is stored into buffer.
        The length is initialized to 0.
    
    
    RAII: Resource Acquisition Is initialization, or
    CADRe: Constructor Acquires, Destructor Releases.
    -------------------------------------------------

        Resources owned by SimpleString:
            The memory pointed to by buffer.

        Constructor allocates memory for buffer.
            buffer = new char[max_size];

        Destructor deallocates memory for buffer.
            delete[] buffer;
    
        The allocation and deallocation of buffer is paired with the constructor and destructor of SimpleString so that it will *never leak the storage*.


    Appending and Printing:
    -----------------------

    void print(const char* tag) const {}

        This method prints the string.
        A tag can be provided so that the invocation can be matched with the result.
        The method can be marked const, because it has no requirement to change the state of the SimpleString.


    append_line():
    
        Takes a null-terminated string and adds its contents plus a newline char to buffer.

        Returns true if x was successfully appended, false if there was not enough space.


    Composing a SimpleString:
    -------------------------

    The order of an object's members during construction and destruction:

        Construction:
        Members are constructed *before* the enclosing object's constructor!
    
        Destruction:
        All members are destructed after the object's destructor is invoked!
    
    
    Call Stack Unwinding
    --------------------

    In simplestring.cpp, inside the try block there is a function call to fn_b() which itself contains a call to fn_C(), but it will fail due to fn_c() trying to initialize a SimpleStringOwner with a default string longer than the maximum of 10. This will unwind the call stack, and ensure that SimpleStringOwner d is never created. This is because no further code in the try block is executed once it has caught an error.


    Exceptions and Performance
    --------------------------
    
    A normally executing C++ program does not incur runtime overhead when checking exceptions.

    Only when an exception is thrown does your program begin to pay for overhead.

    Embedded development:
        Exceptions are not able to be used.
        Real-time guarantees are required.
    
    Legacy code:
        Exceptions may not be able to be used.
    

    Exceptions are elegand because they fit in well with RAII objects.

    When destructors are responsible for cleaning up resources, stack unwinding is a direct and effective way to guarantee against resource leakages.

    In legacy code, you might find manual resource management and error handling instead of RAII objects.


    Alternatives to Exceptions
    --------------------------

    Some C++ fatures can be employed where exceptions are not available.

        First Method:

        Manually enforce class invariants by exposing some method that communicates whether the class invariants could be established.

            ```
            struct HumptyDumpty {
                HumptyDumpty();
                bool is_together_again();
            };
            ```
        
        In idiomatic C++, an exception would be thrown in the constructor. In this case, we must check and treat the situation as an error condition in the calling code:

            ```
            bool send_kings_horses_and_men() {
                HumptyDumpty hd{};
                if (hd.is_together_again()) return false;
                // Class invariants of hd are now guaranteed.
                // Humpty Dumpty had a great fall.

                return true;
            }
            ```
        
        Second Method:
        
        Standard Binding Declaration. A language feature that allows you to return multiple values from a function call.

        Use this feature to return success flags alongside the usual return value.

            ```
            struct Result {
                // 1. A POD is declared that contains a HumptyDumpty and a success flag.
                HumptyDumpty hd;
                bool success;
            };

            // Defines a function that builds and validates a HumptyDumpty. (A factory method).
            Result make_humpty() {
                HumptyDumpty hd{};
                bool is_valid;
                // Check that hd is valid and set is_valid appropriately:
                return { hd, is_valid};
            }

            bool send_kings_horses_and_men() {
                // Unpacks Result into multiple, auto type-deduced variables:
                auto [hd, success] = make_humpty();
                if(!success) return false;
                // Class invariants established

                return true;
            }
            ```


Copy Semantics
--------------

    In programming, the term, "copy semantics" is used to describe the rules for making copies of objects.

    ```
    #include <cstdio>
    
    int add_one_to(int x) {
        // add_one_to takes its argument x by value. Then it modifies the value of x.
        // This modification is isolated from the calling function!
        ++x;
        return x;
    }

    int main() {
        auto original = 1;
        
        // original will be unaffected by the function call, because add_one_to receives a copy of original.
        auto result = add_one_to(original);

        printf("Original: %d; Result:%d", original, result); 
    }
    ```

    A similar thing happens with user-defined POD types, a "member-wise copy".

    ```
    // The function make_transpose() generates a copy of th POD type Point.
    struct Point {
        int x, y;
    };

    Point make_transpose(Point P) {
        int tmp = p.x;
        p.x =p.y;
        p.y = tmp;
        return p;
    }
    ```

    Invoking make_transpose() leaves the original unaffected, as a copy is sent to the function.

    Using the default copy semantics for fully featured classes can be dangerous. Using the example of SimpleString, two SimpleString classes would point to the same bugger. When one of the SimpleString classes is destroyed, the memory in buffer will be freed. If you try writing to the buffer using the remaining SimpleString, you will run into undefined behaviour.

    double free
    -----------
    Destroying the remaining SimpleString class will free the buffer again, this is referred to as a "double free."


Copy Constructors
-----------------

    There are two ways to copy an object:

        1.  Copy Construction.
        2.  Copy Assignment.
    

    Copy Construction

        Creates a copy and assigns it to a brand-new object.

        ```
        struct SimpleString {
            // other is const because it is merely being copied and there is no need to modify
            SimpleString(const SimpleString& other);
        };
        ```

        Use the copy constructor like any other constructors:

        ```
        SimpleString a;

        // Invokes the copy constructor of SimpleString with a, resulting in a_copy.
        SimpleString a_copy{ a };
        ```
    
        Deep Copy

        Copy the data pointd to by the original 'buffer' into a new buffer.

        Make a new allocation on the free store, instead of copying the pointer 'buffer'. This results in two independent SimpleString classes.

        ```
        SimpleString(const SimpleString& other)
            : max_size{ other.max_size},
            buffer{ new char[other.max_size]},
            length{ other.length } {
                std::strncpy(buffer, other.buffer, max_size);
            }
        ``` 

    Copy Assignment

    Copy an object and assign it to another existing object.

    You must create a copy assignment operator that perform a clean hand-off:
        No two SimpleString classes can own the same buffer, causing dangling pointers and double frees.
    
    When you use the default copy assignment operator for simple types, it just copies th members from the source object to the destination object. For SimpleString, the original SimpleString class's buffer gets rewritten without freeing the dynamically allocated char array, and two SimpleStrings own the same buffer.

    